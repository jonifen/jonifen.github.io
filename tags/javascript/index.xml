<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Jon Cain üë®‚Äçüíª (jonifen.co.uk)</title><link>/tags/javascript/</link><description>Recent content in javascript on Jon Cain üë®‚Äçüíª (jonifen.co.uk)</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>(c) 2020 Jon Cain</copyright><lastBuildDate>Mon, 28 Dec 2020 10:20:47 +0000</lastBuildDate><atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>How to test a custom React hook component</title><link>/blog/react-js-test-custom-hook-component/</link><pubDate>Mon, 28 Dec 2020 10:20:47 +0000</pubDate><guid>/blog/react-js-test-custom-hook-component/</guid><description>As part of my GameBrowser side-project, I&amp;rsquo;m at the stage where I wanted to start improving the UI a bit. This included needing to define a way of filtering the servers in the list, because they&amp;rsquo;re all saved together at the moment. As a first attempt, I opted for a simple Dropdown control and decided to make it generic using a custom React Hook.
The result was the creation of useDropdown.</description></item><item><title>Basic Setup for React Projects in 2020</title><link>/blog/basic-setup-for-react-projects-2020/</link><pubDate>Sat, 26 Dec 2020 11:26:44 +0000</pubDate><guid>/blog/basic-setup-for-react-projects-2020/</guid><description>I&amp;rsquo;ve seen a lot of people using project initialisation tools to create their new React projects over the years, in particular create-react-app. While I do see there are some benefits to these tools (in particular for newcomers), these tools do have their disadvantages.
I cloned a repository the other day which was using create-react-app, and an npm i installed over 2000 packages! This is a hell of a lot to download just to be able to run some code locally.</description></item><item><title>Convert JavaScript Number to Number Array</title><link>/blog/js-number-to-number-array/</link><pubDate>Sat, 16 Nov 2019 22:32:35 +0000</pubDate><guid>/blog/js-number-to-number-array/</guid><description>I had a number which I wanted converting into an array where each digit of the number was an item in the array. I tried a few different ways of doing this but always ended up with a string array which wasn&amp;rsquo;t what I wanted.
To get around this, you can use some of the new features introduced in ES6 as follows:
1 2 const theNumber = 432375; const output = Array.</description></item><item><title>React.js Unit Testing with Jest and Enzyme</title><link>/blog/react-unit-testing-jest-enzyme/</link><pubDate>Thu, 07 Dec 2017 22:34:37 +0000</pubDate><guid>/blog/react-unit-testing-jest-enzyme/</guid><description>I&amp;rsquo;ve written loads of unit tests in my lifetime for C# and JavaScript, but never gotten around to writing any for testing the actual React components because there&amp;rsquo;s always been something more pressing. Time to put that right and take the plunge.
So I&amp;rsquo;ve picked up the project which resulted from the React.js Continued&amp;hellip; State! tutorial as a starter for ten as it already has a lot of the boilerplate stuff in place.</description></item><item><title>Map() support in JavaScript ES6/ES2015</title><link>/blog/js-es6-map-support/</link><pubDate>Tue, 20 Jun 2017 22:47:06 +0100</pubDate><guid>/blog/js-es6-map-support/</guid><description>ECMAScript 6/2015 has brought a lot of new things to the world of JavaScript, and Map() is one of them. However, not all browsers are too keen on particular ways of using it.
I&amp;rsquo;ve been working on a UI project at work this week and encountered a weird issue with some code written by a colleague. We have some scenarios in our React app where we need to translate/map some values from an integer to a string (for textual display in the rendered screen).</description></item><item><title>Rendering an array of data as a clickable list using React.js</title><link>/blog/reactjs-render-clickable-lists/</link><pubDate>Thu, 13 Apr 2017 21:55:37 +0100</pubDate><guid>/blog/reactjs-render-clickable-lists/</guid><description>React.js is great for quickly rendering arrays of data in a tabular format, and there&amp;rsquo;s loads of grid-like packages out there in npm, but sometimes you just need to hand-crank something yourself. Which is fine, until you want the row to be clickable&amp;hellip;
So how would you usually render a page from an array of data? Well, I&amp;rsquo;d probably start with some form of iterating the array and building up the content that way.</description></item><item><title>React.js Tutorials</title><link>/blog/react-js-tutorials/</link><pubDate>Mon, 20 Feb 2017 22:50:08 +0000</pubDate><guid>/blog/react-js-tutorials/</guid><description>I&amp;rsquo;ve created a few pages on here which are now growing into a bit of a tutorial, so thought I&amp;rsquo;d collate the links into one post (and append links to any new related posts in the future) so it&amp;rsquo;s easier to follow.
So to start off, I&amp;rsquo;ll rewind back to November 2015, when I created my Getting Started with React.js post. This was using JSX and ES5, along with Browserify to &amp;ldquo;compile&amp;rdquo; the code to &amp;ldquo;Vanilla JS&amp;rdquo; which the web browsers support.</description></item><item><title>React.js Continued... State!</title><link>/blog/react-js-state/</link><pubDate>Tue, 14 Feb 2017 22:13:37 +0000</pubDate><guid>/blog/react-js-state/</guid><description>This time I&amp;rsquo;ll be looking at State. What it is and how to use it&amp;hellip; Like last time, we&amp;rsquo;ll be continuing with the code from the previous post.
Last time we created 2 components, home (which was a stateful component) and header (which was a stateless component). This time we&amp;rsquo;re going to handle state within the home component by calling an API. As in previous posts, I&amp;rsquo;ll be using the UK Police API as it doesn&amp;rsquo;t require any authentication (or at least it doesn&amp;rsquo;t at the moment, that could change!</description></item><item><title>React.js Continued... Components!</title><link>/blog/react-js-continued-components/</link><pubDate>Mon, 13 Feb 2017 22:36:58 +0000</pubDate><guid>/blog/react-js-continued-components/</guid><description>It&amp;rsquo;s time to continue on from my React.js Revisited post that I made a few days ago. This time we&amp;rsquo;ll look at creating some components&amp;hellip;
So what exactly is a &amp;ldquo;Component&amp;rdquo; in the context of React.js? In my head, I visualise React.js a little like Web UI Lego. The idea is you build your web application in blocks which are then built in a way which suits you and your application.</description></item><item><title>React.js Revisited</title><link>/blog/react-js-revisited/</link><pubDate>Thu, 09 Feb 2017 21:06:50 +0000</pubDate><guid>/blog/react-js-revisited/</guid><description>Edit 05/03/2017 - My son has kindly followed this mini tutorial and has pointed out a few areas where I didn&amp;rsquo;t make much sense. All part of learning! But I&amp;rsquo;ve updated those areas below.
It&amp;rsquo;s been a while since I wrote up my beginner guide to React.js and I&amp;rsquo;ve been thinking it&amp;rsquo;s time to revisit it as things have changed since then with better tooling and ES6 support etc. so here I am!</description></item><item><title>npm package.json - Package From a Github Commit</title><link>/blog/npm-package-from-github-commit/</link><pubDate>Mon, 16 Jan 2017 22:38:50 +0000</pubDate><guid>/blog/npm-package-from-github-commit/</guid><description>Sometimes the version of an npm package has some functionality you want, but it has issues which break other stuff. What do you do? Pull the repo and build it yourself and shoehorn it in? Let&amp;rsquo;s see&amp;hellip;
For my example, I&amp;rsquo;ll use the griddle-react package.
I quite like the Griddle component (griddle-react), I&amp;rsquo;ve posted about it in the past, and use it both at work and in side-projects at home whenever tabular data needs to be displayed as it&amp;rsquo;s quick and simple.</description></item><item><title>JSX/ES6 Syntax Highlighting in Visual Studio 2015</title><link>/blog/jsx-highlighting-vs2015/</link><pubDate>Fri, 13 Jan 2017 20:02:39 +0000</pubDate><guid>/blog/jsx-highlighting-vs2015/</guid><description>Visual Studio 2015 (by default) isn&amp;rsquo;t exactly crash hot for editing JavaScript, especially JSX/ES6 for React etc.
A lot of developers seem to opt for alternative IDEs/editors for writing JavaScript code instead of staying in Visual Studio, however it&amp;rsquo;s often more effort to manage multiple IDEs for one project. I&amp;rsquo;ve tried a few things myself to get things working, some of the steps below are courtesy of Nick Dewitt on this StackOverflow post.</description></item><item><title>Griddle - A Grid/Table Component for React</title><link>/blog/griddle-a-gridtable-component-for-react/</link><pubDate>Thu, 12 Nov 2015 20:34:00 +0000</pubDate><guid>/blog/griddle-a-gridtable-component-for-react/</guid><description>We had a requirement at work to display some tabular data that is retrieved from a web service as a JSON object. As we have recently started using React, it made sense to find a decent component that suited what we needed and after a bit of browsing, we found Griddle.
Unfortunately, their documentation; while it wasn&amp;rsquo;t bad, it&amp;rsquo;s not the best I&amp;rsquo;ve seen so I thought I&amp;rsquo;d throw something together to show how to get it working quickly and using a publicly available API, so anyone should be able to follow.</description></item><item><title>Getting Started with React.js</title><link>/blog/getting-started-with-reactjs/</link><pubDate>Fri, 06 Nov 2015 22:08:00 +0000</pubDate><guid>/blog/getting-started-with-reactjs/</guid><description>I&amp;rsquo;ve recently reviewed some of my blog content and found that some of it is advising of a way to do things in a way that I would no longer suggest. This article in particular focused around using Browserify and also installing npm packages globally; neither of which I&amp;rsquo;ve used/done for a long time.
I did write a &amp;ldquo;revisited&amp;rdquo; post a few years after this one, which is much more relevant and you can view that here: React JS Revisited.</description></item></channel></rss>