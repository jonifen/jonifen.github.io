<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on Jon Cain 👨‍💻 (jonifen.co.uk)</title><link>/tags/nginx/</link><description>Recent content in nginx on Jon Cain 👨‍💻 (jonifen.co.uk)</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>(c) 2022 Jon Cain</copyright><lastBuildDate>Sat, 06 Feb 2021 12:53:32 +0100</lastBuildDate><atom:link href="/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring NGINX to work with React Router</title><link>/blog/2021/react-router-nginx/</link><pubDate>Sat, 06 Feb 2021 12:53:32 +0100</pubDate><guid>/blog/2021/react-router-nginx/</guid><description>When using the BrowserRouter that&amp;rsquo;s provided by React Router, you&amp;rsquo;ll find that if you&amp;rsquo;re navigating within the site to the various URLs, they will work. However if you bookmarked one of those URLs, or refreshed the browser on a URL, it will return a 404.
If you&amp;rsquo;re using Webpack&amp;rsquo;s devserver, then you can get around it with a setting in the webpack.config.js file:
1 2 3 4 devServer: { // your other webserver settings historyApiFallback: true } This setting makes webpack aware of the historyApi that is used by React Router and essentially just redirects any unknown URLs back to the root.</description></item></channel></rss>