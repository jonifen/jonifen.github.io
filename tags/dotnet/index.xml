<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on Jon Cain 👨‍💻 (jonifen.co.uk)</title><link>/tags/dotnet/</link><description>Recent content in dotnet on Jon Cain 👨‍💻 (jonifen.co.uk)</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>(c) 2022 Jon Cain</copyright><lastBuildDate>Fri, 04 Sep 2020 22:28:13 +0100</lastBuildDate><atom:link href="/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging a dotnetcore application hosted in a local IIS server</title><link>/blog/debug-dotnetcore-local-iis-hosted/</link><pubDate>Fri, 04 Sep 2020 22:28:13 +0100</pubDate><guid>/blog/debug-dotnetcore-local-iis-hosted/</guid><description>When debugging a dotnet framework application that is hosted in a local IIS server, you would usually identify the w3wp.exe instance running the Application Pool and attach your Visual Studio instance to it. Sure you might get some issues with modules not loading, but on the whole this technique allows you to debug your application through IIS.
However, with dotnet core applications, things are a little different as they&amp;rsquo;re not ran as managed code from within a w3wp.</description></item></channel></rss>