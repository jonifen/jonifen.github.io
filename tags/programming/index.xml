<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Jon Cain üë®‚Äçüíª (jonifen.co.uk)</title><link>/tags/programming/</link><description>Recent content in programming on Jon Cain üë®‚Äçüíª (jonifen.co.uk)</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>(c) 2022 Jon Cain</copyright><lastBuildDate>Tue, 23 Nov 2021 17:30:10 +0000</lastBuildDate><atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Storybook JS: 'Cannot GET /'</title><link>/blog/2021/storybookjs-cannot-get-root/</link><pubDate>Tue, 23 Nov 2021 17:30:10 +0000</pubDate><guid>/blog/2021/storybookjs-cannot-get-root/</guid><description>When you run storybook locally, you might encounter the error &amp;lsquo;Cannot GET /&amp;rsquo; when browsing to localhost:6006.
The general advice given online is to delete all node modules for your project and re-install the packages using your preferred package manager. However, this doesn&amp;rsquo;t always solve the problem and I was in this position just a moment ago.
Luckily, in the Storybook CLI docs, there is an argument --no-manager-cache which says that it will disable the Storybook manager caching mechanism.</description></item><item><title>React Native &amp; Android: "Failed to Install the App"</title><link>/blog/2021/react-native-android-failed-to-install-the-app/</link><pubDate>Tue, 24 Aug 2021 19:38:26 +0100</pubDate><guid>/blog/2021/react-native-android-failed-to-install-the-app/</guid><description>I&amp;rsquo;ve been setting up a MacBook Pro to be able to work on a React Native mobile app and hit a stumbling block when running the Android app locally.
I had already installed all the relevant applications needed (Android Studio, a JDK etc.) but when I ran react-native run-android, it would give me the following error:
error Failed to install the app. Make sure you have the Android development environment set up I tried a few different things until I came across a solution proposed by Menon Hasan on Stack Overflow where they proposed the following command to set the executable permission on the gradlew file:</description></item><item><title>iOS APNs/APS Environments</title><link>/blog/2021/ios-push-notifications-apns-environments/</link><pubDate>Thu, 17 Jun 2021 15:11:12 +0100</pubDate><guid>/blog/2021/ios-push-notifications-apns-environments/</guid><description>At work, we&amp;rsquo;re working on a React Native mobile app. For our iOS deployment, we have our test builds (that consumes APIs in a testing environment) going to MS App Center, and production builds going to TestFlight, eventually being promoted to the App Store.
We use MS Notification Hub to handle our push notifications that are triggered by internal systems etc. but we wanted to achieve a situation where we were using a testing APNs environment (i.</description></item><item><title>Reduce a large JSON object down to only what you need</title><link>/blog/2021/js-map-trim-json-objects/</link><pubDate>Mon, 22 Mar 2021 20:27:32 +0100</pubDate><guid>/blog/2021/js-map-trim-json-objects/</guid><description>Sometimes you need to use an API that returns a large payload, but you may only need to use a small number of fields from that payload. Rather than try storing that data, or hand-balling the data yourself, there is an alternative solution.
In various other languages, such as C#, you can serialise and deserialise data and strip out what data you don&amp;rsquo;t want (by not declaring those properties in the models).</description></item><item><title>Stop your font sizes differing between Landscape and Portrait mode on iOS</title><link>/blog/2021/stop-font-size-changes-ios-landscape-portrait/</link><pubDate>Thu, 18 Mar 2021 21:59:32 +0100</pubDate><guid>/blog/2021/stop-font-size-changes-ios-landscape-portrait/</guid><description>Have you ever had the problem where you&amp;rsquo;re styling some content but when you rotate the device to change between landscape and portrait modes on an iOS device, the font size changes?
The simplest way to resolve it is to include this in one of your primary css rules such as html or body:
1 -webkit-text-size-adjust: 100%;</description></item><item><title>Testing Mobile App in AWS Device Farm using Appium and Node</title><link>/blog/2021/appium-node-aws-device-farm-react-native/</link><pubDate>Fri, 05 Mar 2021 11:02:32 +0000</pubDate><guid>/blog/2021/appium-node-aws-device-farm-react-native/</guid><description>Warning: this post is quite code heavy as I offer our solution as an example
At work, we&amp;rsquo;ve been working on a mobile app for our customers. We&amp;rsquo;ve been looking at automated testing to interact with the app like a user would on a device and came across Appium and Detox as potential options that wouldn&amp;rsquo;t cost too much to run.
As we primarily worked on Windows machines, Detox was out of the running as it seems to be only guaranteed support on MacOS, so we started looking at Appium instead.</description></item><item><title>Configuring NGINX to work with React Router</title><link>/blog/2021/react-router-nginx/</link><pubDate>Sat, 06 Feb 2021 12:53:32 +0100</pubDate><guid>/blog/2021/react-router-nginx/</guid><description>When using the BrowserRouter that&amp;rsquo;s provided by React Router, you&amp;rsquo;ll find that if you&amp;rsquo;re navigating within the site to the various URLs, they will work. However if you bookmarked one of those URLs, or refreshed the browser on a URL, it will return a 404.
If you&amp;rsquo;re using Webpack&amp;rsquo;s devserver, then you can get around it with a setting in the webpack.config.js file:
1 2 3 4 devServer: { // your other webserver settings historyApiFallback: true } This setting makes webpack aware of the historyApi that is used by React Router and essentially just redirects any unknown URLs back to the root.</description></item><item><title>How to test a custom React hook component</title><link>/blog/react-js-test-custom-hook-component/</link><pubDate>Mon, 28 Dec 2020 10:20:47 +0000</pubDate><guid>/blog/react-js-test-custom-hook-component/</guid><description>As part of my GameBrowser side-project, I&amp;rsquo;m at the stage where I wanted to start improving the UI a bit. This included needing to define a way of filtering the servers in the list, because they&amp;rsquo;re all saved together at the moment. As a first attempt, I opted for a simple Dropdown control and decided to make it generic using a custom React Hook.
The result was the creation of useDropdown.</description></item><item><title>Basic Setup for React Projects in 2020</title><link>/blog/basic-setup-for-react-projects-2020/</link><pubDate>Sat, 26 Dec 2020 11:26:44 +0000</pubDate><guid>/blog/basic-setup-for-react-projects-2020/</guid><description>I&amp;rsquo;ve seen a lot of people using project initialisation tools to create their new React projects over the years, in particular create-react-app. While I do see there are some benefits to these tools (in particular for newcomers), these tools do have their disadvantages.
I cloned a repository the other day which was using create-react-app, and an npm i installed over 2000 packages! This is a hell of a lot to download just to be able to run some code locally.</description></item><item><title>How I Built My Custom Hugo Pagination</title><link>/blog/how-i-built-my-custom-hugo-pagination/</link><pubDate>Tue, 08 Sep 2020 21:46:16 +0100</pubDate><guid>/blog/how-i-built-my-custom-hugo-pagination/</guid><description>I&amp;rsquo;ve been planning on improving the pagination control for my blog for some time, but it always seemed a bigger job than I really wanted to work on in my spare time, but I was wrong. The only complexity was around the weird templating syntax that I hadn&amp;rsquo;t really got to grips with fully yet.
So I did some research first, why re-invent the wheel right? And I came across a really good tutorial from Glenn McComb where he went through how he built his, and seeing his examples, along with his explanations, made the syntax sink in better.</description></item><item><title>Debugging a dotnetcore application hosted in a local IIS server</title><link>/blog/debug-dotnetcore-local-iis-hosted/</link><pubDate>Fri, 04 Sep 2020 22:28:13 +0100</pubDate><guid>/blog/debug-dotnetcore-local-iis-hosted/</guid><description>When debugging a dotnet framework application that is hosted in a local IIS server, you would usually identify the w3wp.exe instance running the Application Pool and attach your Visual Studio instance to it. Sure you might get some issues with modules not loading, but on the whole this technique allows you to debug your application through IIS.
However, with dotnet core applications, things are a little different as they&amp;rsquo;re not ran as managed code from within a w3wp.</description></item><item><title>Moq - Setup Mock method specifying parameters of type</title><link>/blog/moq-setup-method-with-object-parameters/</link><pubDate>Sat, 22 Aug 2020 22:16:44 +0100</pubDate><guid>/blog/moq-setup-method-with-object-parameters/</guid><description>When working on my GameBrowser project this evening, I wanted to verify that a method setup on a mock object had been called when a property of the parameter object was a particular value.
My scenario was that I was writing a unit test for the Quake3 protocol client and within that protocol client, I build the payload to include the 4-byte prefix data, so I needed to test that it was doing that payload building part correctly.</description></item><item><title>Convert JavaScript Number to Number Array</title><link>/blog/js-number-to-number-array/</link><pubDate>Sat, 16 Nov 2019 22:32:35 +0000</pubDate><guid>/blog/js-number-to-number-array/</guid><description>I had a number which I wanted converting into an array where each digit of the number was an item in the array. I tried a few different ways of doing this but always ended up with a string array which wasn&amp;rsquo;t what I wanted.
To get around this, you can use some of the new features introduced in ES6 as follows:
1 2 const theNumber = 432375; const output = Array.</description></item><item><title>The imported project ".../Microsoft.WebApplication.targets" was not found</title><link>/blog/vs2019-webapplication-targets-not-found/</link><pubDate>Mon, 17 Jun 2019 21:59:33 +0100</pubDate><guid>/blog/vs2019-webapplication-targets-not-found/</guid><description>We have an existing web application project at work which was failing to open in Visual Studio 2019 with the following error:
The imported project &amp;#34;C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\MSBuild\Microsoft\VisualStudio\vCurrent\WebApplications\Microsoft.WebApplication.targets&amp;#34; was not found. After some research, I came across this a VS Community post where Microsoft have deemed it to be under consideration, but after a few months, it&amp;rsquo;s still outstanding.
Figuring out that the issue could surround the vCurrent part of the path, I did a bit more research, coming across another VS Community post which discusses this point, and it turns out that Microsoft have changed the MSBuildToolsVersion variable to output Current rather than the version (as it did previously).</description></item><item><title>Hosting Umbraco 7 on AWS Elastic Beanstalk</title><link>/blog/hosting-umbraco-7-aws-elastic-beanstalk/</link><pubDate>Thu, 13 Jun 2019 21:05:13 +0100</pubDate><guid>/blog/hosting-umbraco-7-aws-elastic-beanstalk/</guid><description>Previously at work, our marketing websites were all designed up front, with copy provided by our colleagues in Marketing and then the pages were generated by the development teams. Because this was taking our developers away from the tasks where they can add real value to the customer journey by streamlining the end-to-end process, it was decided that the company would benefit from introducing a CMS solution with which the Marketing team and Content Writers would be able to manage content themselves.</description></item><item><title>No executable found matching command "dotnet-lambda"</title><link>/blog/no-executable-found-dotnet-lambda/</link><pubDate>Wed, 01 May 2019 21:01:03 +0100</pubDate><guid>/blog/no-executable-found-dotnet-lambda/</guid><description>When packaging up a dotnetcore lambda function for deployment to AWS, you would run the following command:
dotnet lambda package -o ../../build/{DestinationFileName}.zip However, when I ran this command earlier today on a new Lambda function project, I got the following error:
No executable found matching command &amp;#34;dotnet-lambda&amp;#34; This is because the Amazon.Lambda.Tools package isn&amp;rsquo;t being included in the dotnet build process, so to fix things, I had to edit the .</description></item><item><title>Umbraco 7: Create a custom Property Editor</title><link>/blog/umbraco-7-custom-property-editor/</link><pubDate>Sun, 19 Aug 2018 13:18:18 +0000</pubDate><guid>/blog/umbraco-7-custom-property-editor/</guid><description>Recently, I&amp;rsquo;ve been working on creating an implementation of Umbraco CMS for the Marketing team at work to use for quickly creating content for promotions etc. and the SEO Manager has asked what we could implement to benefit them in terms of SEO (Search Engine Optimisation for those who don&amp;rsquo;t know).
Requirements Now, until working on this, I knew what SEO was, but had no idea what it entailed, so working with the SEO Manager, we outlined the following requirements for our initial (MVP) release.</description></item><item><title>React.js Unit Testing with Jest and Enzyme</title><link>/blog/react-unit-testing-jest-enzyme/</link><pubDate>Thu, 07 Dec 2017 22:34:37 +0000</pubDate><guid>/blog/react-unit-testing-jest-enzyme/</guid><description>I&amp;rsquo;ve written loads of unit tests in my lifetime for C# and JavaScript, but never gotten around to writing any for testing the actual React components because there&amp;rsquo;s always been something more pressing. Time to put that right and take the plunge.
So I&amp;rsquo;ve picked up the project which resulted from the React.js Continued&amp;hellip; State! tutorial as a starter for ten as it already has a lot of the boilerplate stuff in place.</description></item><item><title>Map() support in JavaScript ES6/ES2015</title><link>/blog/js-es6-map-support/</link><pubDate>Tue, 20 Jun 2017 22:47:06 +0100</pubDate><guid>/blog/js-es6-map-support/</guid><description>ECMAScript 6/2015 has brought a lot of new things to the world of JavaScript, and Map() is one of them. However, not all browsers are too keen on particular ways of using it.
I&amp;rsquo;ve been working on a UI project at work this week and encountered a weird issue with some code written by a colleague. We have some scenarios in our React app where we need to translate/map some values from an integer to a string (for textual display in the rendered screen).</description></item><item><title>Rendering an array of data as a clickable list using React.js</title><link>/blog/reactjs-render-clickable-lists/</link><pubDate>Thu, 13 Apr 2017 21:55:37 +0100</pubDate><guid>/blog/reactjs-render-clickable-lists/</guid><description>React.js is great for quickly rendering arrays of data in a tabular format, and there&amp;rsquo;s loads of grid-like packages out there in npm, but sometimes you just need to hand-crank something yourself. Which is fine, until you want the row to be clickable&amp;hellip;
So how would you usually render a page from an array of data? Well, I&amp;rsquo;d probably start with some form of iterating the array and building up the content that way.</description></item><item><title>React.js Tutorials</title><link>/blog/react-js-tutorials/</link><pubDate>Mon, 20 Feb 2017 22:50:08 +0000</pubDate><guid>/blog/react-js-tutorials/</guid><description>I&amp;rsquo;ve created a few pages on here which are now growing into a bit of a tutorial, so thought I&amp;rsquo;d collate the links into one post (and append links to any new related posts in the future) so it&amp;rsquo;s easier to follow.
So to start off, I&amp;rsquo;ll rewind back to November 2015, when I created my Getting Started with React.js post. This was using JSX and ES5, along with Browserify to &amp;ldquo;compile&amp;rdquo; the code to &amp;ldquo;Vanilla JS&amp;rdquo; which the web browsers support.</description></item><item><title>React.js Continued... State!</title><link>/blog/react-js-state/</link><pubDate>Tue, 14 Feb 2017 22:13:37 +0000</pubDate><guid>/blog/react-js-state/</guid><description>This time I&amp;rsquo;ll be looking at State. What it is and how to use it&amp;hellip; Like last time, we&amp;rsquo;ll be continuing with the code from the previous post.
Last time we created 2 components, home (which was a stateful component) and header (which was a stateless component). This time we&amp;rsquo;re going to handle state within the home component by calling an API. As in previous posts, I&amp;rsquo;ll be using the UK Police API as it doesn&amp;rsquo;t require any authentication (or at least it doesn&amp;rsquo;t at the moment, that could change!</description></item><item><title>React.js Continued... Components!</title><link>/blog/react-js-continued-components/</link><pubDate>Mon, 13 Feb 2017 22:36:58 +0000</pubDate><guid>/blog/react-js-continued-components/</guid><description>It&amp;rsquo;s time to continue on from my React.js Revisited post that I made a few days ago. This time we&amp;rsquo;ll look at creating some components&amp;hellip;
So what exactly is a &amp;ldquo;Component&amp;rdquo; in the context of React.js? In my head, I visualise React.js a little like Web UI Lego. The idea is you build your web application in blocks which are then built in a way which suits you and your application.</description></item><item><title>The target='_blank' vulnerability</title><link>/blog/the-target-_blank-vulnerability/</link><pubDate>Sat, 11 Feb 2017 16:57:02 +0000</pubDate><guid>/blog/the-target-_blank-vulnerability/</guid><description>For many years, I was a fan of using target=&amp;quot;_blank&amp;quot; inside any anchor tags on my website that linked to external sites so it would keep the viewer still on my site in the background so they can easily come back to it later on. However, Ben Halpern describes the problem (with examples) of how it is an issue on this page and how the window/tab containing the origin website (i.</description></item><item><title>React.js Revisited</title><link>/blog/react-js-revisited/</link><pubDate>Thu, 09 Feb 2017 21:06:50 +0000</pubDate><guid>/blog/react-js-revisited/</guid><description>Edit 05/03/2017 - My son has kindly followed this mini tutorial and has pointed out a few areas where I didn&amp;rsquo;t make much sense. All part of learning! But I&amp;rsquo;ve updated those areas below.
It&amp;rsquo;s been a while since I wrote up my beginner guide to React.js and I&amp;rsquo;ve been thinking it&amp;rsquo;s time to revisit it as things have changed since then with better tooling and ES6 support etc. so here I am!</description></item><item><title>npm package.json - Package From a Github Commit</title><link>/blog/npm-package-from-github-commit/</link><pubDate>Mon, 16 Jan 2017 22:38:50 +0000</pubDate><guid>/blog/npm-package-from-github-commit/</guid><description>Sometimes the version of an npm package has some functionality you want, but it has issues which break other stuff. What do you do? Pull the repo and build it yourself and shoehorn it in? Let&amp;rsquo;s see&amp;hellip;
For my example, I&amp;rsquo;ll use the griddle-react package.
I quite like the Griddle component (griddle-react), I&amp;rsquo;ve posted about it in the past, and use it both at work and in side-projects at home whenever tabular data needs to be displayed as it&amp;rsquo;s quick and simple.</description></item><item><title>JSX/ES6 Syntax Highlighting in Visual Studio 2015</title><link>/blog/jsx-highlighting-vs2015/</link><pubDate>Fri, 13 Jan 2017 20:02:39 +0000</pubDate><guid>/blog/jsx-highlighting-vs2015/</guid><description>Visual Studio 2015 (by default) isn&amp;rsquo;t exactly crash hot for editing JavaScript, especially JSX/ES6 for React etc.
A lot of developers seem to opt for alternative IDEs/editors for writing JavaScript code instead of staying in Visual Studio, however it&amp;rsquo;s often more effort to manage multiple IDEs for one project. I&amp;rsquo;ve tried a few things myself to get things working, some of the steps below are courtesy of Nick Dewitt on this StackOverflow post.</description></item><item><title>Griddle - A Grid/Table Component for React</title><link>/blog/griddle-a-gridtable-component-for-react/</link><pubDate>Thu, 12 Nov 2015 20:34:00 +0000</pubDate><guid>/blog/griddle-a-gridtable-component-for-react/</guid><description>We had a requirement at work to display some tabular data that is retrieved from a web service as a JSON object. As we have recently started using React, it made sense to find a decent component that suited what we needed and after a bit of browsing, we found Griddle.
Unfortunately, their documentation; while it wasn&amp;rsquo;t bad, it&amp;rsquo;s not the best I&amp;rsquo;ve seen so I thought I&amp;rsquo;d throw something together to show how to get it working quickly and using a publicly available API, so anyone should be able to follow.</description></item><item><title>Getting Started with React.js</title><link>/blog/getting-started-with-reactjs/</link><pubDate>Fri, 06 Nov 2015 22:08:00 +0000</pubDate><guid>/blog/getting-started-with-reactjs/</guid><description>I&amp;rsquo;ve recently reviewed some of my blog content and found that some of it is advising of a way to do things in a way that I would no longer suggest. This article in particular focused around using Browserify and also installing npm packages globally; neither of which I&amp;rsquo;ve used/done for a long time.
I did write a &amp;ldquo;revisited&amp;rdquo; post a few years after this one, which is much more relevant and you can view that here: React JS Revisited.</description></item><item><title>Ribbon in .NET 4.5 using WPF and MVVM</title><link>/blog/ribbon-in-net45-using-wpf-mvvm/</link><pubDate>Fri, 18 Jul 2014 20:18:00 +0000</pubDate><guid>/blog/ribbon-in-net45-using-wpf-mvvm/</guid><description>I&amp;rsquo;ve been spending some time recently to learn WPF a bit better including the MVVM pattern to encourage the separation of concerns between the view and the logic behind it.
It&amp;rsquo;s been a steep learning curve (to say the least!) but today I spent a bit of time looking into getting an Office-esque ribbon bar onto the main window of my dummy application. At first I wasn&amp;rsquo;t too sure, but I soon realised it&amp;rsquo;s not too dissimilar to any other button.</description></item><item><title>Laptop Shopping</title><link>/blog/laptop-shopping/</link><pubDate>Sat, 31 May 2014 00:08:00 +0000</pubDate><guid>/blog/laptop-shopping/</guid><description>&amp;hellip; it&amp;rsquo;s just never easy when you&amp;rsquo;re picky like me.
So as you&amp;rsquo;ll have noticed from my previous posts, I&amp;rsquo;ve been using my wife&amp;rsquo;s Asus 1005P (Atom CPU) and a 7 year old Vaio C2M/W. Over the last month or so I&amp;rsquo;ve been suffering from a &amp;ldquo;crisis of confidence&amp;rdquo; where I&amp;rsquo;ve been asking how I managed to become a senior developer. After reading Scott Hanselman&amp;rsquo;s blog on the topic, it seems that it&amp;rsquo;s a common feeling amongst developers.</description></item></channel></rss>